public double[][][] correctDeviation (double[][][] data, Enum.MODE mode) {
    double[][][] newData = new double[3][3][100];

    double value[][] = new double[3][3];
    int count[][] = new int[3][3];

    // 変数にXYZそれぞれの一個目の値を放り込む
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            value[i][j] = data[i][j][0];
        }
    }

    // 代表値が出ている場所を取得する
    switch (mode) {
        case MAX:
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    for (int k = 0; k < 100; k++) {
                        if (value[i][j] < data[i][j][k]) {
                            value[i][j] = data[i][j][k];
                            count[i][j] = k;
                        }
                    }
                }
            }
            break;
        case MIN:
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    for (int k = 0; k < 100; k++) {
                        if (value[i][j] > data[i][j][k]) {
                            value[i][j] = data[i][j][k];
                            count[i][j] = k;
                        }
                    }
                }
            }
            break;
        case MEDIAN:
            // キーが自動ソートされるTreeMapを用いる．データと順番を紐付けしたものを作成し，中央値の初期の順番の値を取り出す．
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    TreeMap<Double, Integer> treeMap = new TreeMap<>();

                    for (int k = 0; k < 100; k++) {
                        treeMap.put(data[i][j][k], k);
                    }

                    int loopCount = 0;
                    for (Integer initCount : treeMap.values()) {
                        if (loopCount == 49) {
                            count[i][j] = initCount;
                        }

                        loopCount++;
                    }
                }
            }
            break;
    }
    // 1回目のデータの代表値が出た場所と，2回目・3回目のデータの代表値が出た場所の差をとる
    // とったら，その差だけデータをずらす

    // sample
    // 一回目：50，二回目：30 → 右に20ずらす 一回目-二回目=+20
    // 一回目：30，二回目：50 → 左に20ずらす 一回目-二回目=-20

    // ずらす移動量を計算（XYZそれぞれ）
    int lagData[][] = new int[2][3];

    ArrayList<ArrayList<ArrayList<Double>>> tmpData = new ArrayList<>();

    ArrayList<ArrayList<Double>> tmpData1 = new ArrayList<>();
    ArrayList<Double> tmpData1X = new ArrayList<>();
    ArrayList<Double> tmpData1Y = new ArrayList<>();
    ArrayList<Double> tmpData1Z = new ArrayList<>();
    tmpData1.add(tmpData1X);
    tmpData1.add(tmpData1Y);
    tmpData1.add(tmpData1Z);

    ArrayList<ArrayList<Double>> tmpData2 = new ArrayList<>();
    ArrayList<Double> tmpData2X = new ArrayList<>();
    ArrayList<Double> tmpData2Y = new ArrayList<>();
    ArrayList<Double> tmpData2Z = new ArrayList<>();
    tmpData2.add(tmpData2X);
    tmpData2.add(tmpData2Y);
    tmpData2.add(tmpData2Z);

    tmpData.add(tmpData1);
    tmpData.add(tmpData2);

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 100; k++) {
                tmpData.get(i).get(j).add(data[i][j][k]);
            }
        }
    }

    // どれだけズレているかを計算する
    for (int i = 0; i < 3; i++) {
        lagData[0][i] = count[0][i] - count[1][i];
        lagData[1][i] = count[0][i] - count[2][i];
    }

    // 実際にリストの要素をずらしていく
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            Collections.rotate(tmpData.get(i).get(j), lagData[i][j]);
        }
    }

    // ずらした後のデータを配列に入れる
    // 1回目のデータに関しては基準となるデータなのでそのまま入れる
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 100; j++) {
            newData[0][i][j] = data[0][i][j];
        }
    }

    // ずらしたデータを入れる
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 100; k++) {
                newData[i + 1][j][k] = tmpData.get(i).get(j).get(k);
            }
        }
    }

    return newData;
}
