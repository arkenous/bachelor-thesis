public double[][][] LowpassFilter (double[][][] data, String dataName) {
    DoubleFFT_1D realfft = new DoubleFFT_1D(data[0][0].length);

    // フーリエ変換を実行
    for (double[][] i : data) {
        for (double[] j : i) {
            realfft.realForward(j);
        }
    }

    // 実数部，虚数部それぞれを入れる配列
    double[][][] real = new double[data.length][data[0].length][data[0][0].length];
    double[][][] imaginary = new double[data.length][data[0].length][data[0][0].length];

    int countReal = 0;
    int countImaginary = 0;

    // 実数部と虚数部に分解
    for (int i = 0; i < data.length; i++) {
        for (int j = 0; j < data[i].length; j++) {
            for (int k = 0; k < data[i][j].length; k++) {
                if (k % 2 == 0) {
                    real[i][j][countReal] = data[i][j][k];
                    countReal++;
                    if (countReal == 99) countReal = 0;
                }
                else {
                    imaginary[i][j][countImaginary] = data[i][j][k];
                    countImaginary++;
                    if (countImaginary == 99) countImaginary = 0;
                }
            }
        }
    }

    // ローパスフィルタ処理
    for (int i = 0; i < data.length; i++) {
        for (int j = 0; j < data[i].length; j++) {
            for (int k = 0; k < data[i][j].length; k++) {
                if (k > 30) data[i][j][k] = 0;
            }
        }
    }

    // 逆フーリエ変換を実行
    for (double[][] i : data) {
        for (double[] j : i) {
            realfft.realInverse(j, true);
        }
    }

    return data;
}
